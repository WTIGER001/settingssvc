// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"restapi/operations/configuration"
	"restapi/operations/preferences"
)

// NewSettingsAPI creates a new Settings instance
func NewSettingsAPI(spec *loads.Document) *SettingsAPI {
	return &SettingsAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		ConfigurationAddCategoryHandler: configuration.AddCategoryHandlerFunc(func(params configuration.AddCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationAddCategory has not yet been implemented")
		}),
		ConfigurationAddDefinitionHandler: configuration.AddDefinitionHandlerFunc(func(params configuration.AddDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationAddDefinition has not yet been implemented")
		}),
		ConfigurationAddOwnerTypeHandler: configuration.AddOwnerTypeHandlerFunc(func(params configuration.AddOwnerTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationAddOwnerType has not yet been implemented")
		}),
		ConfigurationDeleteCategoryHandler: configuration.DeleteCategoryHandlerFunc(func(params configuration.DeleteCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationDeleteCategory has not yet been implemented")
		}),
		ConfigurationDeleteDefinitionHandler: configuration.DeleteDefinitionHandlerFunc(func(params configuration.DeleteDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationDeleteDefinition has not yet been implemented")
		}),
		PreferencesDeleteOwnerHandler: preferences.DeleteOwnerHandlerFunc(func(params preferences.DeleteOwnerParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesDeleteOwner has not yet been implemented")
		}),
		PreferencesDeleteProfileHandler: preferences.DeleteProfileHandlerFunc(func(params preferences.DeleteProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesDeleteProfile has not yet been implemented")
		}),
		ConfigurationDeleteTypeHandler: configuration.DeleteTypeHandlerFunc(func(params configuration.DeleteTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationDeleteType has not yet been implemented")
		}),
		ConfigurationGetCategoriesHandler: configuration.GetCategoriesHandlerFunc(func(params configuration.GetCategoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationGetCategories has not yet been implemented")
		}),
		ConfigurationGetDefinitionHandler: configuration.GetDefinitionHandlerFunc(func(params configuration.GetDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationGetDefinition has not yet been implemented")
		}),
		ConfigurationGetDefinitionsHandler: configuration.GetDefinitionsHandlerFunc(func(params configuration.GetDefinitionsParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationGetDefinitions has not yet been implemented")
		}),
		PreferencesGetMyActiveProfileHandler: preferences.GetMyActiveProfileHandlerFunc(func(params preferences.GetMyActiveProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesGetMyActiveProfile has not yet been implemented")
		}),
		PreferencesGetOwnerHandler: preferences.GetOwnerHandlerFunc(func(params preferences.GetOwnerParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesGetOwner has not yet been implemented")
		}),
		ConfigurationGetOwnerTypesHandler: configuration.GetOwnerTypesHandlerFunc(func(params configuration.GetOwnerTypesParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationGetOwnerTypes has not yet been implemented")
		}),
		PreferencesGetProfileHandler: preferences.GetProfileHandlerFunc(func(params preferences.GetProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesGetProfile has not yet been implemented")
		}),
		PreferencesGetProfileVersionsHandler: preferences.GetProfileVersionsHandlerFunc(func(params preferences.GetProfileVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesGetProfileVersions has not yet been implemented")
		}),
		PreferencesGetProfilesHandler: preferences.GetProfilesHandlerFunc(func(params preferences.GetProfilesParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesGetProfiles has not yet been implemented")
		}),
		ConfigurationGetTypeHandler: configuration.GetTypeHandlerFunc(func(params configuration.GetTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationGetType has not yet been implemented")
		}),
		ConfigurationUpdateDefinitionHandler: configuration.UpdateDefinitionHandlerFunc(func(params configuration.UpdateDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationUpdateDefinition has not yet been implemented")
		}),
		PreferencesUpdateOwnerHandler: preferences.UpdateOwnerHandlerFunc(func(params preferences.UpdateOwnerParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesUpdateOwner has not yet been implemented")
		}),
		ConfigurationUpdateOwnerTypeHandler: configuration.UpdateOwnerTypeHandlerFunc(func(params configuration.UpdateOwnerTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationUpdateOwnerType has not yet been implemented")
		}),
		PreferencesUpdateProfileHandler: preferences.UpdateProfileHandlerFunc(func(params preferences.UpdateProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation PreferencesUpdateProfile has not yet been implemented")
		}),
	}
}

/*SettingsAPI Definition for the Preferences Server */
type SettingsAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ConfigurationAddCategoryHandler sets the operation handler for the add category operation
	ConfigurationAddCategoryHandler configuration.AddCategoryHandler
	// ConfigurationAddDefinitionHandler sets the operation handler for the add definition operation
	ConfigurationAddDefinitionHandler configuration.AddDefinitionHandler
	// ConfigurationAddOwnerTypeHandler sets the operation handler for the add owner type operation
	ConfigurationAddOwnerTypeHandler configuration.AddOwnerTypeHandler
	// ConfigurationDeleteCategoryHandler sets the operation handler for the delete category operation
	ConfigurationDeleteCategoryHandler configuration.DeleteCategoryHandler
	// ConfigurationDeleteDefinitionHandler sets the operation handler for the delete definition operation
	ConfigurationDeleteDefinitionHandler configuration.DeleteDefinitionHandler
	// PreferencesDeleteOwnerHandler sets the operation handler for the delete owner operation
	PreferencesDeleteOwnerHandler preferences.DeleteOwnerHandler
	// PreferencesDeleteProfileHandler sets the operation handler for the delete profile operation
	PreferencesDeleteProfileHandler preferences.DeleteProfileHandler
	// ConfigurationDeleteTypeHandler sets the operation handler for the delete type operation
	ConfigurationDeleteTypeHandler configuration.DeleteTypeHandler
	// ConfigurationGetCategoriesHandler sets the operation handler for the get categories operation
	ConfigurationGetCategoriesHandler configuration.GetCategoriesHandler
	// ConfigurationGetDefinitionHandler sets the operation handler for the get definition operation
	ConfigurationGetDefinitionHandler configuration.GetDefinitionHandler
	// ConfigurationGetDefinitionsHandler sets the operation handler for the get definitions operation
	ConfigurationGetDefinitionsHandler configuration.GetDefinitionsHandler
	// PreferencesGetMyActiveProfileHandler sets the operation handler for the get my active profile operation
	PreferencesGetMyActiveProfileHandler preferences.GetMyActiveProfileHandler
	// PreferencesGetOwnerHandler sets the operation handler for the get owner operation
	PreferencesGetOwnerHandler preferences.GetOwnerHandler
	// ConfigurationGetOwnerTypesHandler sets the operation handler for the get owner types operation
	ConfigurationGetOwnerTypesHandler configuration.GetOwnerTypesHandler
	// PreferencesGetProfileHandler sets the operation handler for the get profile operation
	PreferencesGetProfileHandler preferences.GetProfileHandler
	// PreferencesGetProfileVersionsHandler sets the operation handler for the get profile versions operation
	PreferencesGetProfileVersionsHandler preferences.GetProfileVersionsHandler
	// PreferencesGetProfilesHandler sets the operation handler for the get profiles operation
	PreferencesGetProfilesHandler preferences.GetProfilesHandler
	// ConfigurationGetTypeHandler sets the operation handler for the get type operation
	ConfigurationGetTypeHandler configuration.GetTypeHandler
	// ConfigurationUpdateDefinitionHandler sets the operation handler for the update definition operation
	ConfigurationUpdateDefinitionHandler configuration.UpdateDefinitionHandler
	// PreferencesUpdateOwnerHandler sets the operation handler for the update owner operation
	PreferencesUpdateOwnerHandler preferences.UpdateOwnerHandler
	// ConfigurationUpdateOwnerTypeHandler sets the operation handler for the update owner type operation
	ConfigurationUpdateOwnerTypeHandler configuration.UpdateOwnerTypeHandler
	// PreferencesUpdateProfileHandler sets the operation handler for the update profile operation
	PreferencesUpdateProfileHandler preferences.UpdateProfileHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *SettingsAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SettingsAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SettingsAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SettingsAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SettingsAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SettingsAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SettingsAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SettingsAPI
func (o *SettingsAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ConfigurationAddCategoryHandler == nil {
		unregistered = append(unregistered, "configuration.AddCategoryHandler")
	}

	if o.ConfigurationAddDefinitionHandler == nil {
		unregistered = append(unregistered, "configuration.AddDefinitionHandler")
	}

	if o.ConfigurationAddOwnerTypeHandler == nil {
		unregistered = append(unregistered, "configuration.AddOwnerTypeHandler")
	}

	if o.ConfigurationDeleteCategoryHandler == nil {
		unregistered = append(unregistered, "configuration.DeleteCategoryHandler")
	}

	if o.ConfigurationDeleteDefinitionHandler == nil {
		unregistered = append(unregistered, "configuration.DeleteDefinitionHandler")
	}

	if o.PreferencesDeleteOwnerHandler == nil {
		unregistered = append(unregistered, "preferences.DeleteOwnerHandler")
	}

	if o.PreferencesDeleteProfileHandler == nil {
		unregistered = append(unregistered, "preferences.DeleteProfileHandler")
	}

	if o.ConfigurationDeleteTypeHandler == nil {
		unregistered = append(unregistered, "configuration.DeleteTypeHandler")
	}

	if o.ConfigurationGetCategoriesHandler == nil {
		unregistered = append(unregistered, "configuration.GetCategoriesHandler")
	}

	if o.ConfigurationGetDefinitionHandler == nil {
		unregistered = append(unregistered, "configuration.GetDefinitionHandler")
	}

	if o.ConfigurationGetDefinitionsHandler == nil {
		unregistered = append(unregistered, "configuration.GetDefinitionsHandler")
	}

	if o.PreferencesGetMyActiveProfileHandler == nil {
		unregistered = append(unregistered, "preferences.GetMyActiveProfileHandler")
	}

	if o.PreferencesGetOwnerHandler == nil {
		unregistered = append(unregistered, "preferences.GetOwnerHandler")
	}

	if o.ConfigurationGetOwnerTypesHandler == nil {
		unregistered = append(unregistered, "configuration.GetOwnerTypesHandler")
	}

	if o.PreferencesGetProfileHandler == nil {
		unregistered = append(unregistered, "preferences.GetProfileHandler")
	}

	if o.PreferencesGetProfileVersionsHandler == nil {
		unregistered = append(unregistered, "preferences.GetProfileVersionsHandler")
	}

	if o.PreferencesGetProfilesHandler == nil {
		unregistered = append(unregistered, "preferences.GetProfilesHandler")
	}

	if o.ConfigurationGetTypeHandler == nil {
		unregistered = append(unregistered, "configuration.GetTypeHandler")
	}

	if o.ConfigurationUpdateDefinitionHandler == nil {
		unregistered = append(unregistered, "configuration.UpdateDefinitionHandler")
	}

	if o.PreferencesUpdateOwnerHandler == nil {
		unregistered = append(unregistered, "preferences.UpdateOwnerHandler")
	}

	if o.ConfigurationUpdateOwnerTypeHandler == nil {
		unregistered = append(unregistered, "configuration.UpdateOwnerTypeHandler")
	}

	if o.PreferencesUpdateProfileHandler == nil {
		unregistered = append(unregistered, "preferences.UpdateProfileHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SettingsAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SettingsAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *SettingsAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *SettingsAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *SettingsAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SettingsAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the settings API
func (o *SettingsAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SettingsAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category"] = configuration.NewAddCategory(o.context, o.ConfigurationAddCategoryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/definition"] = configuration.NewAddDefinition(o.context, o.ConfigurationAddDefinitionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/type"] = configuration.NewAddOwnerType(o.context, o.ConfigurationAddOwnerTypeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/category/{name}"] = configuration.NewDeleteCategory(o.context, o.ConfigurationDeleteCategoryHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/definition/{id}"] = configuration.NewDeleteDefinition(o.context, o.ConfigurationDeleteDefinitionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/owner/{id}"] = preferences.NewDeleteOwner(o.context, o.PreferencesDeleteOwnerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/profile/{id}"] = preferences.NewDeleteProfile(o.context, o.PreferencesDeleteProfileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/type/{id}"] = configuration.NewDeleteType(o.context, o.ConfigurationDeleteTypeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category"] = configuration.NewGetCategories(o.context, o.ConfigurationGetCategoriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/definition/{id}"] = configuration.NewGetDefinition(o.context, o.ConfigurationGetDefinitionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/definition"] = configuration.NewGetDefinitions(o.context, o.ConfigurationGetDefinitionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/my"] = preferences.NewGetMyActiveProfile(o.context, o.PreferencesGetMyActiveProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/owner/{id}"] = preferences.NewGetOwner(o.context, o.PreferencesGetOwnerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/type"] = configuration.NewGetOwnerTypes(o.context, o.ConfigurationGetOwnerTypesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/{id}"] = preferences.NewGetProfile(o.context, o.PreferencesGetProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/{id}/version"] = preferences.NewGetProfileVersions(o.context, o.PreferencesGetProfileVersionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles"] = preferences.NewGetProfiles(o.context, o.PreferencesGetProfilesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/type/{id}"] = configuration.NewGetType(o.context, o.ConfigurationGetTypeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/definition/{id}"] = configuration.NewUpdateDefinition(o.context, o.ConfigurationUpdateDefinitionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/owner/{id}"] = preferences.NewUpdateOwner(o.context, o.PreferencesUpdateOwnerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/type/{id}"] = configuration.NewUpdateOwnerType(o.context, o.ConfigurationUpdateOwnerTypeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profile/{id}"] = preferences.NewUpdateProfile(o.context, o.PreferencesUpdateProfileHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SettingsAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *SettingsAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
