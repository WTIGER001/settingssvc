// Code generated by go-swagger; DO NOT EDIT.

package preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMyActiveProfileHandlerFunc turns a function with the right signature into a get my active profile handler
type GetMyActiveProfileHandlerFunc func(GetMyActiveProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMyActiveProfileHandlerFunc) Handle(params GetMyActiveProfileParams) middleware.Responder {
	return fn(params)
}

// GetMyActiveProfileHandler interface for that can handle valid get my active profile params
type GetMyActiveProfileHandler interface {
	Handle(GetMyActiveProfileParams) middleware.Responder
}

// NewGetMyActiveProfile creates a new http.Handler for the get my active profile operation
func NewGetMyActiveProfile(ctx *middleware.Context, handler GetMyActiveProfileHandler) *GetMyActiveProfile {
	return &GetMyActiveProfile{Context: ctx, Handler: handler}
}

/*GetMyActiveProfile swagger:route GET /my Preferences getMyActiveProfile

Find Preference for the JWT supplied

Returns a single owner

*/
type GetMyActiveProfile struct {
	Context *middleware.Context
	Handler GetMyActiveProfileHandler
}

func (o *GetMyActiveProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMyActiveProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
