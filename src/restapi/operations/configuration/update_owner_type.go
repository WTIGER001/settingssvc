// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateOwnerTypeHandlerFunc turns a function with the right signature into a update owner type handler
type UpdateOwnerTypeHandlerFunc func(UpdateOwnerTypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateOwnerTypeHandlerFunc) Handle(params UpdateOwnerTypeParams) middleware.Responder {
	return fn(params)
}

// UpdateOwnerTypeHandler interface for that can handle valid update owner type params
type UpdateOwnerTypeHandler interface {
	Handle(UpdateOwnerTypeParams) middleware.Responder
}

// NewUpdateOwnerType creates a new http.Handler for the update owner type operation
func NewUpdateOwnerType(ctx *middleware.Context, handler UpdateOwnerTypeHandler) *UpdateOwnerType {
	return &UpdateOwnerType{Context: ctx, Handler: handler}
}

/*UpdateOwnerType swagger:route POST /type/{id} Configuration updateOwnerType

Update an existing type

*/
type UpdateOwnerType struct {
	Context *middleware.Context
	Handler UpdateOwnerTypeHandler
}

func (o *UpdateOwnerType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateOwnerTypeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
