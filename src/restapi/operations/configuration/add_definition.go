// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddDefinitionHandlerFunc turns a function with the right signature into a add definition handler
type AddDefinitionHandlerFunc func(AddDefinitionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddDefinitionHandlerFunc) Handle(params AddDefinitionParams) middleware.Responder {
	return fn(params)
}

// AddDefinitionHandler interface for that can handle valid add definition params
type AddDefinitionHandler interface {
	Handle(AddDefinitionParams) middleware.Responder
}

// NewAddDefinition creates a new http.Handler for the add definition operation
func NewAddDefinition(ctx *middleware.Context, handler AddDefinitionHandler) *AddDefinition {
	return &AddDefinition{Context: ctx, Handler: handler}
}

/*AddDefinition swagger:route POST /definition Configuration addDefinition

Add a new Preference Definition to the set of available definitions

*/
type AddDefinition struct {
	Context *middleware.Context
	Handler AddDefinitionHandler
}

func (o *AddDefinition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddDefinitionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
